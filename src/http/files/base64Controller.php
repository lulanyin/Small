<?php
namespace Small\http\files;

use Small\http\HttpController;
use Small\model\models\FilesModel;
use Small\model\models\UserModel;
use Small\lib\util\File;
use Small\lib\util\Str;
use Intervention\Image\ImageManagerStatic as Image;
use Intervention\Image\ImageManagerStatic;


class base64Controller extends HttpController {

    /**
     * @var string
     */
    private $disabled_files = "php|aspx|asp|c|jar|java|js|html|css|py|dat|dll|exe|dmg|jsp";

    public $file_content = null;

    public $file_name = null;

    public $for = null;

    public $file_src = null;

    public $file_path = null;

    public $suffix = '';

    public $upload_path;

    public $freeUpload = false;

    public $max_height = 960;

    public function index(...$args)
    {
        //parent::index(); // TODO: Change the autogenerated stub
        $this->upload_path = \Small\Config::get("define.attachment");
        $imageSet = \Small\Config::get('private.image');
        $this->max_height = $imageSet['max_height'] ?? $this->max_height;

        $file_content   = $this->getPOSTData("file_content", null, "缺少文件数据");
        $file_name      = $this->getPOSTData("file_name", null, "缺少文件名");
        $chunk          = $this->getPOSTData("chunk", 'false');
        $for            = $this->getPOSTData("up_for", null);
        if(strlen($file_content)>=5*1024*1024){
            $this->response("文件超过5MB，无法上传");
        }
        //统一处理POST过来的文件内容（此内容统一用base64编码）
        if(stripos($file_content, 'data:')===0 && stripos($file_content, 'base64,')>0){
            $file_content = str_replace(" ", "+", $file_content);
            $file_content = explode('base64,', $file_content, 2)[1];
            $file_content = base64_decode($file_content);

        }else{
            $this->response("文件数据格式错误");
        }
        //文件后缀校验
        $suffix = strchr($file_name, ".");
        if(empty($suffix)){
            $this->response("文件格式错误{$file_name}}");
        }
        if(in_array(substr($suffix, 1), explode("|", $this->disabled_files))){
            $this->response("文件格式错误：{$suffix}");
        }
        //通过base64文件内容，识别文件格式

        $this->file_content = $file_content;

        $this->file_name = $file_name;
        $this->for = $for;
        $this->suffix = $suffix;

        if($chunk=='true'){
            $this->chunkUpload();
            return;
        }

        switch ($for){
            case "pro" :
                $this->pro("pro");
                break;
            case "face" :
                //上传个人头像
                $this->face("face");
                break;
            case "image" :
                $this->image();
                break;
            default :
                $this->upload();
                break;
        }

    }

    /**
     * 分片上传处理
     */
    private function chunkUpload(){
        $chunks = $this->getPostData('chunks', 1);
        $chunks = is_numeric($chunks) && $chunks>0 ? $chunks : 1;
        $chunks = intval($chunks);
        $uploaded_chunks = $this->getPostData('uploaded_chunks', 0);
        $uploaded_chunks = is_numeric($uploaded_chunks) && $uploaded_chunks>0 ? $chunks : 0;
        $uploaded_chunks = intval($uploaded_chunks);
        //用md5名称保存临时文件
        $temp_file = $this->upload_path."/tmp_".md5($this->file_name);
        //创建或者打开（写入方式）不断的往文件里写入传进来的数据
        $file = fopen($temp_file, 'a');
        if(fwrite($file, $this->file_content)){
            @fclose($file);
            if($chunks==$uploaded_chunks+1){
                $type = in_array($this->suffix, ['.jpg', '.png', '.jpeg', '.bmp', '.gif', '.psd']) ? 'images' : 'files';
                $dir = "/{$type}/".date("Y/m/d/");
                if(!is_dir($this->upload_path.$dir)){
                    if(!File::makeDir($this->upload_path.$dir, null)){
                        $this->response("无写入权限");
                    }
                }
                $file_name = time().Str::randomString().$this->suffix;
                //当传完的时候，重命名文件
                @rename($temp_file, $this->upload_path.$dir.$file_name);
                //保存进数据库
                //保存数据到数据库
                $file = [
                    "name"  => $this->file_name,
                    "url"   => $dir.$file_name,
                    "file_hash" => md5_file($this->upload_path.$dir.$file_name)
                ];

                if($this->user['uid']>0){
                    $file["uid"] = $this->user['uid'];
                }elseif(property_exists($this, "uid")){
                    $file["uid"] = $this->uid;
                }else{
                    $file['uid'] = 0;
                }
                $fm = new FilesModel();

                @$fm->mainQuery()->insert($file);
                $this->file_path = $dir.$file_name;
                $this->file_src = attachmentUrlRebuild($dir.$file_name);
                if($this->checkImageFile()){
                    //图片文件，进行裁剪
                    $img = ImageManagerStatic::make($this->upload_path.$this->file_path);
                    $width = $img->getWidth();
                    $height = $img->getHeight();
                    if($height>$this->max_height){
                        $width = ceil($this->max_height*$width/$height);
                        $img->resize($width, $this->max_height);
                        $img->save();
                    }
                }
                //md5判断
                $this->checkMd5();
                $this->response([
                    "src"   => $this->file_src,
                    "value" => $this->file_path
                ]);
            }
            $this->response(0, "分片上传{$uploaded_chunks}/{$chunks}完成");
        }else{
            @fclose($file);
            $this->response("临时文件写入失败");
        }
    }

    /**
     * 检测文件名称
     * @param string $mime
     */
    private function checkFileMime($mime="image"){
        $suffix = strchr($this->file_name, ".");
        switch ($mime){
            case "image" :
                if(!in_array($suffix, [".jpg", ".png", ".jpeg"])){
                    $this->response("请上传JPG、PNG格式图片");
                }
                break;
            case "xlsx" :
                if($suffix!=".xlsx"){
                    $this->response("请上传xlsx格式的文档");
                }
                break;
            default :

                break;
        }
    }

    /**
     * 上传图片需要裁剪
     * @param $type
     */
    private function pro($type){
        $this->checkFileMime("image");
        //保存文件
        if($this->image()){
            $img = Image::make($this->upload_path.$this->file_path);
            $img->resize(320, 320);
            $img->save();
            $this->response(0, [
                "src"   => $this->file_src,
                "value" => $this->file_path,
                "type"  => $type
            ]);
        }else{
            $this->response("文件上传失败");
        }
    }

    /**
     * 头像
     * @param $type
     */
    private function face($type){
        if(!$this->user['uid']>0){
            $this->response("未登录，无法上传文件");
        }
        $this->checkFileMime("image");
        //保存文件
        if($this->image()){
            $img = Image::make($this->upload_path.$this->file_path);
            $img->resize(120, 120);
            $img->save();
            //保存
            $u = new UserModel();
            $u->mainQuery()
                ->where("uid", $this->user['uid'] ?? ($this->uid ?? 0))
                ->update([
                "face"  => $this->file_path
            ]);
            $this->response(0, [
                "src"   => $this->file_src,
                "value" => $this->file_path,
                "type"  => $type
            ]);
        }else{
            $this->response("文件上传失败");
        }
    }

    private function image(){
        //保存文件
        if($this->saveFile()){
            //检测是不是图片
            if(!$this->checkImageFile()){
                $this->removeFile();
                $this->response('上传文件不是图片');
            }
            $this->response([
                'src'   => $this->file_src,
                'value' => $this->file_path
            ]);
        }else{
            $this->response('上传文件失败');
        }
    }

    private function upload(){
        //保存文件
        if($this->saveFile()){
            $this->response([
                'src'   => $this->file_src,
                'value' => $this->file_path
            ]);
        }else{
            $this->response('上传文件失败');
        }
    }
    /**
     * 保存文件，并返回文件地址
     * @return bool|string
     */
    private function saveFile(){
        //文件类型
        $type = in_array($this->suffix, ['.jpg', '.png', '.jpeg', '.bmp', '.gif', '.psd']) ? 'images' : 'files';

        $dir = "/{$type}/".date("Y/m/d/");
        if(!is_dir($this->upload_path.$dir)){
            if(!File::makeDir($this->upload_path.$dir, null)){
                $this->response("无写入权限");
            }
        }
        $file_name = time().Str::randomString().$this->suffix;
        if(!empty($this->file_content)){
            if(file_put_contents($this->upload_path.$dir.$file_name, $this->file_content)){
                $this->file_path = $dir.$file_name;
                $this->file_src = attachmentUrlRebuild($dir.$file_name);
                if($this->checkImageFile()){
                    //图片文件，进行裁剪
                    $img = ImageManagerStatic::make($this->upload_path.$this->file_path);
                    $width = $img->getWidth();
                    $height = $img->getHeight();
                    if($height>$this->max_height){
                        $width = ceil($this->max_height*$width/$height);
                        $img->resize($width, $this->max_height);
                        $img->save();
                    }
                }
                //md5判断
                $this->checkMd5();
                return true;
            }else{
                $this->response("无法保存文件");
            }
        }else{
            $this->response("缺少文件内容");
        }
        return false;
    }

    /**
     * 删除文件
     */
    private function removeFile(){
        if($this->file_path){
            if(file_exists($this->upload_path.$this->file_path)){
                unlink($this->upload_path.$this->file_path);
            }
        }
    }

    /**
     * 检测文件的 mime 类型 是不是图片
     * @return bool
     */
    private function checkImageFile(){
        if(!$mimeType = @exif_imagetype($this->upload_path.$this->file_path)){
            return false;
        }
        if ($mimeType == IMAGETYPE_GIF || $mimeType == IMAGETYPE_JPEG || $mimeType == IMAGETYPE_PNG || $mimeType == IMAGETYPE_BMP){
            return true;
        }
        return false;
    }


    private function checkMd5(){
        $md5 = md5_file($this->upload_path.$this->file_path);
        $fm = new FilesModel();
        $check = $fm->mainQuery()
            ->where("file_hash", $md5)
            ->orderBy('id', "desc")
            ->first();
        if(!empty($check) && is_file($this->upload_path.$check['url'])){
            @unlink($this->upload_path.$this->file_path);
            $this->file_path = $check['url'];
            $this->file_src = attachmentUrlRebuild($check['url']);
        }else{
            //保存数据到数据库
            $file = [
                "uid"   => $this->user["uid"] ?? ($this->uid ?? 0),
                "name"  => $this->file_name,
                "url"   => $this->file_path,
                "file_hash" => $md5
            ];
            @$fm->mainQuery()->insert($file);
        }
    }

}