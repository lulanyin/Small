<?php
namespace Small\http\files;

use Small\http\HttpController;
use Small\lib\util\File;
use Small\lib\util\Str;
use Small\model\models\FilesModel;
use Intervention\Image\ImageManagerStatic;

class filesController extends HttpController {

    /**
     * 文件保存路径
     * @var string
     */
    public $file_path;

    /**
     * 文件上传路径
     * @var string
     */
    public $upload_path;

    /**
     * 文件预览地址
     * @var string
     */
    public $file_src;

    /**
     * 图片上传后处理的最高高度
     * @var int
     */
    public $max_height = 960;

    public $args = [];

    public function index(...$args)
    {
        $this->args = $args;
        // TODO: Change the autogenerated stub
        $this->upload_path = \Small\Config::get("define.attachment");
        $imageSet = \Small\Config::get('private.image');
        $this->max_height = $imageSet['max_height'] ?? $this->max_height;

        $files = $_FILES;
        $list = [];
        foreach ($files as $key => $file){
            if($file["error"]>0){
                $this->response("文件上传错误");
            }
            if($file['size']>5*1024*1024){
                $this->response("文件超过5MB，无法上传！");
            }
            if(!in_array($file["type"], ["image/jpeg", "image/png", "image/gif", "image/jpg", "image/bmp"])){
                $this->response("此件类型不允许上传");
            }
            if(!$this->saveFile($file)){
                $this->response("上传文件失败");
            }else{
                $list[] = [
                    "value" => $this->file_path,
                    "src"   => $this->file_src
                ];
            }
        }
        if(isset($args[0]) && $args[0]===true){
            return $list;
        }
        $this->response($list);
    }

    /**
     * 保存文件，并返回文件地址
     * @param $file
     * @return bool|array
     */
    private function saveFile($file){
        $suffix = strchr($file['name'], ".");
        $suffix = !empty($suffix) ? substr($suffix, 1) : '';
        $type = in_array($suffix, ['jpg', 'png', 'jpeg', 'bmp', 'gif', 'psd']) ? 'images' : 'files';
        $dir = "/{$type}/".date("Y/m/d/");
        if(!is_dir($this->upload_path.$dir)){
            if(!File::makeDir($this->upload_path.$dir, null)){
                $this->response("无写入权限");
                return false;
            }
        }
        $file_name = time().Str::randomString().".".$suffix;
        if(is_file($file['tmp_name'])){
            $tempMd5 = md5_file($file['tmp_name']);
            $fm = new FilesModel();
            $check = $fm->mainQuery()
                ->where("file_hash", $tempMd5)
                ->orderBy('id', "desc")
                ->first();
            if(!empty($check)){
                $this->file_path = $check['url'];
                $this->file_src = attachmentUrlRebuild($check['url']);
                return true;
            }else{
                if(move_uploaded_file($file['tmp_name'], $this->upload_path.$dir.$file_name)) {
                    $this->file_path = $dir.$file_name;
                    if(!$this->checkImageFile()){
                        @unlink($this->upload_path.$this->file_path);
                        return false;
                    }
                    $img = ImageManagerStatic::make($this->upload_path.$dir.$file_name);
                    $width = $img->getWidth();
                    $height = $img->getHeight();
                    if($height>$this->max_height){
                        $width = ceil($this->max_height*$width/$height);
                        $img->resize($width, $this->max_height);
                        $img->save();
                    }
                    //保存数据到数据库
                    if(!$this->checkImageFile()){
                        @unlink($this->upload_path.$this->file_path);
                        return false;
                    }
                    $md5 = md5_file($this->upload_path.$dir.$file_name);
                    $check = $fm->mainQuery()
                        ->where("file_hash", $md5)
                        ->orderBy('id', "desc")
                        ->first();
                    if(!empty($check) && is_file($this->upload_path.$check['url'])){
                        @unlink($this->upload_path.$dir.$file_name);
                        $this->file_path = $check['url'];
                        $this->file_src = attachmentUrlRebuild($check['url']);
                        return true;
                    }else{
                        $history = [
                            "uid"   => $this->user["uid"] ?? ($this->uid ?? 0),
                            "name"  => $file['name'],
                            "url"   => $dir.$file_name,
                            "file_hash" => $md5
                        ];
                        @$fm->mainQuery()->insert($history);
                        $this->file_path = $dir.$file_name;
                        $this->file_src = attachmentUrlRebuild($dir.$file_name);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * 检测文件的 mime 类型 是不是图片
     * @return bool
     */
    private function checkImageFile(){
        if(!$mimeType = @exif_imagetype($this->upload_path.$this->file_path)){
            return false;
        }
        if ($mimeType == IMAGETYPE_GIF || $mimeType == IMAGETYPE_JPEG || $mimeType == IMAGETYPE_PNG || $mimeType == IMAGETYPE_BMP){
            return true;
        }
        return false;
    }
}