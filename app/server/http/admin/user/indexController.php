<?php
namespace app\server\http\admin\user;

use Small\annotation\parser\Auth;
use Small\annotation\parser\Inject;
use Small\lib\util\Str;
use Small\model\models\UserModel;
use Small\server\http\HttpController;
use Small\lib\auth\User;

/**
 * @Auth(group="admin")
 * Class indexController
 * @package app\server\http\admin\user
 */
class indexController extends HttpController{

    /**
     * @Inject(User::class)
     * @var
     */
    public $user;

    public function index(...$args)
    {
        //return parent::index($args); // TODO: Change the autogenerated stub
        $pageUrl = $list = [];
        $um = new UserModel();
        $db = $um;
        // <---- begin 上级UID
        $parent_uid = $this->getQueryString("uid");
        if($parent_uid>0){
            $parent = $um->where("u.uid", $parent_uid)
                //->whereFindInSet($this->user["uid"], "u.parents_uid")
                ->select([
                    "u.*",
                    "g.group_name, g.group_type"
                ])
                ->first();
            //如果找不到指定会员，则当前的父级会员是自己所登录的账号
            $parent = !empty($parent) ? $parent : $this->user;
        }else{
            $parent = $this->user;
        }
        if(!empty($parent)){
            $pageUrl['uid'] = $parent_uid;
            //查出所有上级会员
            if(!empty($parent["parents_uid"])){
                $parents = $um->whereIn("u.uid", $parent["parents_uid"])
                    ->orderBy("u.floor", "asc")
                    ->select("u.uid, u.username, u.nickname, u.phone")
                    ->get();
                $this->assign("parents", $parents);
            }
            if($parent['group_id']==2){
                $db = $db->where("u.parent_uid", $parent['uid']);
            }
        }
        $parent['nickname'] = Str::base64Decode($parent['nickname']);
        $this->view->assign("parent", $parent);
        // <---- end 父级会员条件
        // <---- begin 搜索
        $keyword = $this->getQueryString('keyword');
        if(!empty($keyword)){
            $pageUrl['keyword'] = $keyword;
            if(Str::isPhoneNumber($keyword)){
                $db = $db->where("u.phone", $keyword);
            }else{
                $db = $db->where(function ($q) use($keyword){
                    $q->whereLike("u.username", "%{$keyword}%")
                        ->orWhereLike("u.nickname", "%{$keyword}%");
                });
            }
        }
        // <---- end 搜索

        // <---- begin 会员类型条件
        $group = $this->getQueryString("group");
        $group = is_numeric($group) && $group>0 ? $group : 0;
        if(!empty($group)){
            $pageUrl['group'] = $group;
            $db = $db->where("u.group_id", $group);
        }
        // <---- end 会员类型条件

        // <---- begin 会员状态
        $frozen = $this->getQueryString("frozen");
        $frozen = in_array($frozen, [1, 0]) ? $frozen : null;
        if(!is_null($frozen)){
            $pageUrl['frozen'] = $frozen;
            $db = $db->where("u.frozen", $frozen);
        }
        // <---- end 会员状态
        //最终查询字段
        $db = $db
            ->leftJoin("user p", ["u.parent_uid", "p.uid"])
            ->select([
                "u.*",
                "g.group_name, g.group_type",
                "p.nickname p_nick, p.phone p_phone"
            ]);
        //print_r($db->compileToQueryString());exit;
        //行数
        $rows = $db->rows();
        //总页数
        $pages = 0;
        //当前页
        $page = $this->getQueryString("page", 1);
        $page = is_numeric($page) && $page>0 ? $page : 1;
        $total = $this->getQueryString("total", 30);
        $pageUrl["total"] = $total;
        if($rows>0){
            $pages = ceil($rows/$total);
            $page = $page>$pages ? $pages : $page;
            $offset = $total*($page-1);
            $list = $db->orderBy("u.uid", "desc")
                ->get($total, $offset);
            foreach ($list as &$item){
                $item['nickname'] = Str::base64Decode($item['nickname']);
                $item['p_nick'] = Str::base64Decode($item['p_nick']);
            }
        }
        //当前地址
        $self_url = "/admin/user";
        $url = url($self_url)."?".makeUrlQuery($pageUrl);
        $this->view->assign('page', compact('pages', 'page', 'rows', 'url'));
        $this->view->assign('list', $list);
        $this->view->assign('pageUrl', $pageUrl);
        $this->view->assign('self', $self_url);
        //用户分组
        $groups = $um->mainQuery()->newQuery()->from("user_group")->get();
        $this->view->assign('userGroup', $groups);
    }

}